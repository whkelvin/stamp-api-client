/* tslint:disable */
/* eslint-disable */
/**
 * Stamp API
 * Stamp API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Post,
  PostPostRequest,
  PostResultSet,
} from '../models';
import {
    PostFromJSON,
    PostToJSON,
    PostPostRequestFromJSON,
    PostPostRequestToJSON,
    PostResultSetFromJSON,
    PostResultSetToJSON,
} from '../models';

export interface CreatePostRequest {
    postPostRequest: PostPostRequest;
}

export interface GetRecentPostsRequest {
    size?: number;
    lastFetchedItemId?: string;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     * create a new post
     * create a new post
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.postPostRequest === null || requestParameters.postPostRequest === undefined) {
            throw new runtime.RequiredError('postPostRequest','Required parameter requestParameters.postPostRequest was null or undefined when calling createPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPostRequestToJSON(requestParameters.postPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     * create a new post
     * create a new post
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get a list of most recent posts
     * get a list of most recent posts
     */
    async getRecentPostsRaw(requestParameters: GetRecentPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostResultSet>> {
        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.lastFetchedItemId !== undefined) {
            queryParameters['lastFetchedItemId'] = requestParameters.lastFetchedItemId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostResultSetFromJSON(jsonValue));
    }

    /**
     * get a list of most recent posts
     * get a list of most recent posts
     */
    async getRecentPosts(requestParameters: GetRecentPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostResultSet> {
        const response = await this.getRecentPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
